=begin
CodeSnip REST API

Development Pastebin with a twist.

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instact of DefaultApi' do
      @instance.should be_a(SwaggerClient::DefaultApi)
    end
  end

  # unit tests for snip_post
  # Creates a code snippet.
  # Creates a code snippet in the specified language.
  # @param [Hash] opts the optional parameters
  # @option opts [CodeSnippet] :code_snippet_body Code snippet object.
  # @return [nil]
  describe 'snip_post test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for snip_code_snippet_uuid_get
  # Retrieves the specified code snippet.
  # Retrieves the specified code snippet.
  # @param code_snippet_uuid Code snippet unique identifier.
  # @param [Hash] opts the optional parameters
  # @return [CodeSnippet]
  describe 'snip_code_snippet_uuid_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for snip_code_snippet_uuid_put
  # Updates a code snippet.
  # Updates a code snippet changes.
  # @param code_snippet_uuid Code snippet unique identifier.
  # @param [Hash] opts the optional parameters
  # @option opts [CodeSnippet] :code_snippet_body Code snippet object.
  # @return [nil]
  describe 'snip_code_snippet_uuid_put test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for snip_code_snippet_uuid_delete
  # Deletes the specified code snippet.
  # Deletes the specified code snippet.
  # @param code_snippet_uuid Code snippet unique identifier.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'snip_code_snippet_uuid_delete test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

  # unit tests for snips_get
  # Retrieves all code snippets.
  # 
  # @param [Hash] opts the optional parameters
  # @return [CodeSnippetList]
  describe 'snips_get test' do
    it "should work" do
      # assertion here
      # should be_a()
      # should be_nil
      # should ==
      # should_not ==
    end
  end

end
